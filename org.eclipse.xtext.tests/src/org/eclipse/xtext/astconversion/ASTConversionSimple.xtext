grammar org.eclipse.xtext.astconversion.ASTConversionSimple with org.eclipse.xtext.common.Terminals

generate astConversionSimple "http://www.xtext.org/example/ASTConversionSimple"

Program becomes:
	(entries+=Entry)+
	(sequence+=Sequence)+
	returnsNew=ReturnsNew
	actionNew=ActionNew
	list=Lists
	hoistingAlternative=HoistingAlternative
	hoistingActionNew=HoistingActionNew;

Entry becomes:
	AutoClass | AutoExplicitClass | ManualClass | CustomASTClass | CustomCopyASTClass | Other | Element;

AutoClass becomes:
	"auto" ref=Reference name=ID ";";

AutoExplicitClass becomes (name):
	"auto-explicit" ref=Reference name=ID ";";

ManualClass becomes («ASTReference» ref, String value) $$
	this.ref = children.ref;
	this.value = node.getName();
$$:
	"manual" ref=Reference name=ID ";";

CustomASTClass becomes ASTCustomClass $$
	this.type = children.ref.name;
	this.name = node.getName();
$$:
	"custom" ref=Reference name=ID ";";
	
CustomCopyASTClass becomes ASTCustomClass(name) $$
	this.type = children.ref.name;
$$:
	"custom-copy" ref=Reference name=ID ";";

Reference becomes:
	name=ID;

// --------
	
Other becomes:
	"other" name=ID content=(Reference | AutoClass)
;

// --------

Element becomes:
	'element' name=ID (type=ChangeKind)? '=' (value+=ChangeKind)+ ';';

enum ChangeKind becomes:
	ADD='add' | MOVE='move' |
	REMOVE='remove';

// --------

Sequence becomes: "sequence" Addition ( {Sequence.expressions+=current} expressions+=Addition)* ";";

Addition becomes: 
	left=ID '+' right=ID;

ReturnsNew returns ReturnsNewX becomes: 'returns-new' value=ID ';';
ActionNew becomes: {ActionNewX} 'action-new' value=ID ';';

// --------

Lists becomes:
	a=MapEntry ";"
	b=MapEntryCustom ";"
	(c+=MapEntry)+ ";"
	(d+=MapEntryCustom)+ ";"
	e=MapEntryCustom2 ";";


MapEntry becomes[] (String x, int y) $$
  for(String key: node.getKeys()){
    this.add(new «ASTMapEntry»(key, node.getValue()));
  }
$$:
  "[" keys+=ID ("," keys+=ID)* "]" ":" value=INT;

MapEntryCustom becomes[«NodeList»<«ASTMapEntryCustom»>] (String x, String y) $$
  for(String key: node.getKeys()){
    this.add(new «ASTMapEntryCustom»(key, children.value.name));
  }
$$:
  "[" keys+=ID ("," keys+=ID)* "]" ":" value=Reference;

MapEntryCustom2 becomes[«NodeList»<«ASTCustomClass»>] ASTCustomClass $$
  for(Integer key: node.getKeys()){
    this.add(new «ASTCustomClass»(String.valueOf(key), children.value.name));
  }
$$:
  "[" keys+=INT ("," keys+=INT)* "]" ":" value=Reference;


// --------
 
HoistingAlternative becomes: X | Y;

X becomes: "altX" val=ID ';';
Y becomes: "altY" val=ID y=ID ';';

HoistingActionNew becomes: {HoistingActionNewX} 'hoistA' value=ID ';' | 'hoistB' x=ID ';';
