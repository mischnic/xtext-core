/*
 * generated by Xtext
 */
package org.eclipse.xtext.astconversion.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ASTConversionSimpleGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntriesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntriesEntryParserRuleCall_0_0 = (RuleCall)cEntriesAssignment_0.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequenceSequenceParserRuleCall_1_0 = (RuleCall)cSequenceAssignment_1.eContents().get(0);
		private final Assignment cReturnsNewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnsNewReturnsNewParserRuleCall_2_0 = (RuleCall)cReturnsNewAssignment_2.eContents().get(0);
		private final Assignment cActionNewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionNewActionNewParserRuleCall_3_0 = (RuleCall)cActionNewAssignment_3.eContents().get(0);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListListsParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		
		//Program becomes:
		//	entries+=Entry+
		//	sequence+=Sequence+
		//	returnsNew=ReturnsNew
		//	actionNew=ActionNew
		//	list=Lists;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=Entry+ sequence+=Sequence+ returnsNew=ReturnsNew actionNew=ActionNew list=Lists
		public Group getGroup() { return cGroup; }
		
		//entries+=Entry+
		public Assignment getEntriesAssignment_0() { return cEntriesAssignment_0; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_0_0() { return cEntriesEntryParserRuleCall_0_0; }
		
		//sequence+=Sequence+
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }
		
		//Sequence
		public RuleCall getSequenceSequenceParserRuleCall_1_0() { return cSequenceSequenceParserRuleCall_1_0; }
		
		//returnsNew=ReturnsNew
		public Assignment getReturnsNewAssignment_2() { return cReturnsNewAssignment_2; }
		
		//ReturnsNew
		public RuleCall getReturnsNewReturnsNewParserRuleCall_2_0() { return cReturnsNewReturnsNewParserRuleCall_2_0; }
		
		//actionNew=ActionNew
		public Assignment getActionNewAssignment_3() { return cActionNewAssignment_3; }
		
		//ActionNew
		public RuleCall getActionNewActionNewParserRuleCall_3_0() { return cActionNewActionNewParserRuleCall_3_0; }
		
		//list=Lists
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//Lists
		public RuleCall getListListsParserRuleCall_4_0() { return cListListsParserRuleCall_4_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Entry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutoClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAutoExplicitClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManualClassParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCustomASTClassParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCustomCopyASTClassParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOtherParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cElementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Entry becomes:
		//	AutoClass | AutoExplicitClass | ManualClass | CustomASTClass | CustomCopyASTClass | Other | Element;
		@Override public ParserRule getRule() { return rule; }
		
		//AutoClass | AutoExplicitClass | ManualClass | CustomASTClass | CustomCopyASTClass | Other | Element
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AutoClass
		public RuleCall getAutoClassParserRuleCall_0() { return cAutoClassParserRuleCall_0; }
		
		//AutoExplicitClass
		public RuleCall getAutoExplicitClassParserRuleCall_1() { return cAutoExplicitClassParserRuleCall_1; }
		
		//ManualClass
		public RuleCall getManualClassParserRuleCall_2() { return cManualClassParserRuleCall_2; }
		
		//CustomASTClass
		public RuleCall getCustomASTClassParserRuleCall_3() { return cCustomASTClassParserRuleCall_3; }
		
		//CustomCopyASTClass
		public RuleCall getCustomCopyASTClassParserRuleCall_4() { return cCustomCopyASTClassParserRuleCall_4; }
		
		//Other
		public RuleCall getOtherParserRuleCall_5() { return cOtherParserRuleCall_5; }
		
		//Element
		public RuleCall getElementParserRuleCall_6() { return cElementParserRuleCall_6; }
	}
	public class AutoClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.AutoClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AutoClass becomes:
		//	"auto" ref=Reference name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"auto" ref=Reference name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"auto"
		public Keyword getAutoKeyword_0() { return cAutoKeyword_0; }
		
		//ref=Reference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0() { return cRefReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AutoExplicitClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.AutoExplicitClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutoExplicitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AutoExplicitClass becomes (name):
		//	"auto-explicit" ref=Reference name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"auto-explicit" ref=Reference name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"auto-explicit"
		public Keyword getAutoExplicitKeyword_0() { return cAutoExplicitKeyword_0; }
		
		//ref=Reference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0() { return cRefReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ManualClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.ManualClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ManualClass becomes («ASTReference» ref, String value) $$
		//	this.ref = children.ref;
		//	this.value = node.getName();
		//$$:
		//	"manual" ref=Reference name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"manual" ref=Reference name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"manual"
		public Keyword getManualKeyword_0() { return cManualKeyword_0; }
		
		//ref=Reference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0() { return cRefReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CustomASTClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.CustomASTClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CustomASTClass becomes ASTCustomClass $$
		//	this.type = children.ref.name;
		//	this.name = node.getName();
		//$$:
		//	"custom" ref=Reference name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"custom" ref=Reference name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"custom"
		public Keyword getCustomKeyword_0() { return cCustomKeyword_0; }
		
		//ref=Reference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0() { return cRefReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CustomCopyASTClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.CustomCopyASTClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefReferenceParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CustomCopyASTClass becomes ASTCustomClass (name) $$
		//	this.type = children.ref.name;
		//$$:
		//	"custom-copy" ref=Reference name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"custom-copy" ref=Reference name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//"custom-copy"
		public Keyword getCustomCopyKeyword_0() { return cCustomCopyKeyword_0; }
		
		//ref=Reference
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0() { return cRefReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Reference becomes:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class OtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Other");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOtherKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cContentAlternatives_2_0 = (Alternatives)cContentAssignment_2.eContents().get(0);
		private final RuleCall cContentReferenceParserRuleCall_2_0_0 = (RuleCall)cContentAlternatives_2_0.eContents().get(0);
		private final RuleCall cContentAutoClassParserRuleCall_2_0_1 = (RuleCall)cContentAlternatives_2_0.eContents().get(1);
		
		//// --------
		//Other becomes:
		//	"other" name=ID content=(Reference | AutoClass);
		@Override public ParserRule getRule() { return rule; }
		
		//"other" name=ID content=(Reference | AutoClass)
		public Group getGroup() { return cGroup; }
		
		//"other"
		public Keyword getOtherKeyword_0() { return cOtherKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//content=(Reference | AutoClass)
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//(Reference | AutoClass)
		public Alternatives getContentAlternatives_2_0() { return cContentAlternatives_2_0; }
		
		//Reference
		public RuleCall getContentReferenceParserRuleCall_2_0_0() { return cContentReferenceParserRuleCall_2_0_0; }
		
		//AutoClass
		public RuleCall getContentAutoClassParserRuleCall_2_0_1() { return cContentAutoClassParserRuleCall_2_0_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeChangeKindEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueChangeKindEnumRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// --------
		//Element becomes:
		//	'element' name=ID type=ChangeKind? '=' value+=ChangeKind+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'element' name=ID type=ChangeKind? '=' value+=ChangeKind+ ';'
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=ChangeKind?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ChangeKind
		public RuleCall getTypeChangeKindEnumRuleCall_2_0() { return cTypeChangeKindEnumRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value+=ChangeKind+
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//ChangeKind
		public RuleCall getValueChangeKindEnumRuleCall_4_0() { return cValueChangeKindEnumRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cSequenceExpressionsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsAdditionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// --------
		//Sequence becomes:
		//	"sequence" Addition ({Sequence.expressions+=current} expressions+=Addition)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"sequence" Addition ({Sequence.expressions+=current} expressions+=Addition)* ";"
		public Group getGroup() { return cGroup; }
		
		//"sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
		
		//({Sequence.expressions+=current} expressions+=Addition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//{Sequence.expressions+=current}
		public Action getSequenceExpressionsAction_2_0() { return cSequenceExpressionsAction_2_0; }
		
		//expressions+=Addition
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }
		
		//Addition
		public RuleCall getExpressionsAdditionParserRuleCall_2_1_0() { return cExpressionsAdditionParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftIDTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightIDTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Addition becomes:
		//	left=ID '+' right=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ID '+' right=ID
		public Group getGroup() { return cGroup; }
		
		//left=ID
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ID
		public RuleCall getLeftIDTerminalRuleCall_0_0() { return cLeftIDTerminalRuleCall_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//right=ID
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ID
		public RuleCall getRightIDTerminalRuleCall_2_0() { return cRightIDTerminalRuleCall_2_0; }
	}
	public class ReturnsNewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.ReturnsNew");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnsNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnsNew returns ReturnsNewX becomes:
		//	'returns-new' value=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'returns-new' value=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'returns-new'
		public Keyword getReturnsNewKeyword_0() { return cReturnsNewKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ActionNewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.ActionNew");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionNewXAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ActionNew becomes:
		//	{ActionNewX} 'action-new' value=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionNewX} 'action-new' value=ID ';'
		public Group getGroup() { return cGroup; }
		
		//{ActionNewX}
		public Action getActionNewXAction_0() { return cActionNewXAction_0; }
		
		//'action-new'
		public Keyword getActionNewKeyword_1() { return cActionNewKeyword_1; }
		
		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ListsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.Lists");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAMapEntryParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBMapEntryCustomParserRuleCall_2_0 = (RuleCall)cBAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCMapEntryParserRuleCall_4_0 = (RuleCall)cCAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDMapEntryCustomParserRuleCall_6_0 = (RuleCall)cDAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// --------
		//Lists becomes:
		//	a=MapEntry ";"
		//	b=MapEntryCustom ";"
		//	c+=MapEntry+ ";"
		//	d+=MapEntryCustom+ ";";
		@Override public ParserRule getRule() { return rule; }
		
		//a=MapEntry ";" b=MapEntryCustom ";" c+=MapEntry+ ";" d+=MapEntryCustom+ ";"
		public Group getGroup() { return cGroup; }
		
		//a=MapEntry
		public Assignment getAAssignment_0() { return cAAssignment_0; }
		
		//MapEntry
		public RuleCall getAMapEntryParserRuleCall_0_0() { return cAMapEntryParserRuleCall_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//b=MapEntryCustom
		public Assignment getBAssignment_2() { return cBAssignment_2; }
		
		//MapEntryCustom
		public RuleCall getBMapEntryCustomParserRuleCall_2_0() { return cBMapEntryCustomParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//c+=MapEntry+
		public Assignment getCAssignment_4() { return cCAssignment_4; }
		
		//MapEntry
		public RuleCall getCMapEntryParserRuleCall_4_0() { return cCMapEntryParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//d+=MapEntryCustom+
		public Assignment getDAssignment_6() { return cDAssignment_6; }
		
		//MapEntryCustom
		public RuleCall getDMapEntryCustomParserRuleCall_6_0() { return cDMapEntryCustomParserRuleCall_6_0; }
		
		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_1_0 = (RuleCall)cKeysAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeysAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_2_1_0 = (RuleCall)cKeysAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//MapEntry becomes [] (String x, int y) $$
		//  for(String key: node.getKeys()){
		//    this.add(new «ASTMapEntry»(key, node.getValue()));
		//  }
		//$$:
		//	"[" keys+=ID ("," keys+=ID)* "]" ":" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" keys+=ID ("," keys+=ID)* "]" ":" value=INT
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//keys+=ID
		public Assignment getKeysAssignment_1() { return cKeysAssignment_1; }
		
		//ID
		public RuleCall getKeysIDTerminalRuleCall_1_0() { return cKeysIDTerminalRuleCall_1_0; }
		
		//("," keys+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//keys+=ID
		public Assignment getKeysAssignment_2_1() { return cKeysAssignment_2_1; }
		
		//ID
		public RuleCall getKeysIDTerminalRuleCall_2_1_0() { return cKeysIDTerminalRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
	}
	public class MapEntryCustomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.MapEntryCustom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_1_0 = (RuleCall)cKeysAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeysAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_2_1_0 = (RuleCall)cKeysAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueReferenceParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//MapEntryCustom becomes [«NodeList»<«ASTMapEntryCustom»>] (String x, String y) $$
		//  for(String key: node.getKeys()){
		//    this.add(new «ASTMapEntryCustom»(key, children.value.name));
		//  }
		//$$:
		//	"[" keys+=ID ("," keys+=ID)* "]" ":" value=Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" keys+=ID ("," keys+=ID)* "]" ":" value=Reference
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//keys+=ID
		public Assignment getKeysAssignment_1() { return cKeysAssignment_1; }
		
		//ID
		public RuleCall getKeysIDTerminalRuleCall_1_0() { return cKeysIDTerminalRuleCall_1_0; }
		
		//("," keys+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//keys+=ID
		public Assignment getKeysAssignment_2_1() { return cKeysAssignment_2_1; }
		
		//ID
		public RuleCall getKeysIDTerminalRuleCall_2_1_0() { return cKeysIDTerminalRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//value=Reference
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Reference
		public RuleCall getValueReferenceParserRuleCall_5_0() { return cValueReferenceParserRuleCall_5_0; }
	}
	
	public class ChangeKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.astconversion.ASTConversionSimple.ChangeKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDAddKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMOVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMOVEMoveKeyword_1_0 = (Keyword)cMOVEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREMOVEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREMOVERemoveKeyword_2_0 = (Keyword)cREMOVEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ChangeKind becomes:
		//	ADD='add' | MOVE='move' |
		//	REMOVE='remove';
		public EnumRule getRule() { return rule; }
		
		//ADD='add' | MOVE='move' | REMOVE='remove'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='add'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'add'
		public Keyword getADDAddKeyword_0_0() { return cADDAddKeyword_0_0; }
		
		//MOVE='move'
		public EnumLiteralDeclaration getMOVEEnumLiteralDeclaration_1() { return cMOVEEnumLiteralDeclaration_1; }
		
		//'move'
		public Keyword getMOVEMoveKeyword_1_0() { return cMOVEMoveKeyword_1_0; }
		
		//REMOVE='remove'
		public EnumLiteralDeclaration getREMOVEEnumLiteralDeclaration_2() { return cREMOVEEnumLiteralDeclaration_2; }
		
		//'remove'
		public Keyword getREMOVERemoveKeyword_2_0() { return cREMOVERemoveKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final EntryElements pEntry;
	private final AutoClassElements pAutoClass;
	private final AutoExplicitClassElements pAutoExplicitClass;
	private final ManualClassElements pManualClass;
	private final CustomASTClassElements pCustomASTClass;
	private final CustomCopyASTClassElements pCustomCopyASTClass;
	private final ReferenceElements pReference;
	private final OtherElements pOther;
	private final ElementElements pElement;
	private final ChangeKindElements eChangeKind;
	private final SequenceElements pSequence;
	private final AdditionElements pAddition;
	private final ReturnsNewElements pReturnsNew;
	private final ActionNewElements pActionNew;
	private final ListsElements pLists;
	private final MapEntryElements pMapEntry;
	private final MapEntryCustomElements pMapEntryCustom;
	
	public static class ASTConversion {
		public ASTConversion() {}
		
		public static class ReturnsNewXChildren {
		}
		public Object convertReturnsNewX(org.eclipse.xtext.astconversion.astConversionSimple.ReturnsNewX node, ReturnsNewXChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTReturnsNewX() {
				org.eclipse.xtext.astconversion.ast.ASTReturnsNewX XTEXT_INIT() {
					this.value = node.getValue();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ListsChildren {
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTMapEntry> a;
			public org.eclipse.xtext.astconversion.ast.NodeList<org.eclipse.xtext.astconversion.ast.ASTMapEntryCustom> b;
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTMapEntry> c;
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTMapEntryCustom> d;
		}
		public Object convertLists(org.eclipse.xtext.astconversion.astConversionSimple.Lists node, ListsChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTLists() {
				org.eclipse.xtext.astconversion.ast.ASTLists XTEXT_INIT() {
					this.a = children.a;
					this.b = children.b;
					this.c = children.c;
					this.d = children.d;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ActionNewXChildren {
		}
		public Object convertActionNewX(org.eclipse.xtext.astconversion.astConversionSimple.ActionNewX node, ActionNewXChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTActionNewX() {
				org.eclipse.xtext.astconversion.ast.ASTActionNewX XTEXT_INIT() {
					this.value = node.getValue();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class AutoClassChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference ref;
		}
		public Object convertAutoClass(org.eclipse.xtext.astconversion.astConversionSimple.AutoClass node, AutoClassChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTAutoClass() {
				org.eclipse.xtext.astconversion.ast.ASTAutoClass XTEXT_INIT() {
					this.name = node.getName();
					this.ref = children.ref;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class CustomASTClassChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference ref;
		}
		public Object convertCustomASTClass(org.eclipse.xtext.astconversion.astConversionSimple.CustomASTClass node, CustomASTClassChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTCustomClass() {
				org.eclipse.xtext.astconversion.ast.ASTCustomClass XTEXT_INIT() {
						this.type = children.ref.name;
						this.name = node.getName();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ActionNewChildren {
		}
		public Object convertActionNew(org.eclipse.xtext.astconversion.astConversionSimple.ActionNew node, ActionNewChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTActionNew() {
				org.eclipse.xtext.astconversion.ast.ASTActionNew XTEXT_INIT() {
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class CustomCopyASTClassChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference ref;
		}
		public Object convertCustomCopyASTClass(org.eclipse.xtext.astconversion.astConversionSimple.CustomCopyASTClass node, CustomCopyASTClassChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTCustomClass() {
				org.eclipse.xtext.astconversion.ast.ASTCustomClass XTEXT_INIT() {
					this.name = node.getName();
						this.type = children.ref.name;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ReferenceChildren {
		}
		public Object convertReference(org.eclipse.xtext.astconversion.astConversionSimple.Reference node, ReferenceChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTReference() {
				org.eclipse.xtext.astconversion.ast.ASTReference XTEXT_INIT() {
					this.name = node.getName();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ElementChildren {
		}
		public Object convertElement(org.eclipse.xtext.astconversion.astConversionSimple.Element node, ElementChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTElement() {
				org.eclipse.xtext.astconversion.ast.ASTElement XTEXT_INIT() {
					this.name = node.getName();
					this.type = org.eclipse.xtext.astconversion.ast.ASTChangeKind.valueOf(node.getType().name());
					this.value = node.getValue().stream().map(e -> org.eclipse.xtext.astconversion.ast.ASTChangeKind.valueOf(e.name())).collect(java.util.stream.Collectors.toList());
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class MapEntryCustomChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference value;
		}
		public Object convertMapEntryCustom(org.eclipse.xtext.astconversion.astConversionSimple.MapEntryCustom node, MapEntryCustomChildren children){
			return new org.eclipse.xtext.astconversion.ast.NodeList<org.eclipse.xtext.astconversion.ast.ASTMapEntryCustom>() {
				private static final long serialVersionUID = 0;
					org.eclipse.xtext.astconversion.ast.NodeList<org.eclipse.xtext.astconversion.ast.ASTMapEntryCustom> XTEXT_INIT() {
					  for(String key: node.getKeys()){
					    this.add(new org.eclipse.xtext.astconversion.ast.ASTMapEntryCustom(key, children.value.name));
					  }
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ManualClassChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference ref;
		}
		public Object convertManualClass(org.eclipse.xtext.astconversion.astConversionSimple.ManualClass node, ManualClassChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTManualClass() {
				org.eclipse.xtext.astconversion.ast.ASTManualClass XTEXT_INIT() {
						this.ref = children.ref;
						this.value = node.getName();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class AdditionChildren {
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTSequence> expressions;
		}
		public Object convertAddition(org.eclipse.xtext.astconversion.astConversionSimple.Addition node, AdditionChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTAddition() {
				org.eclipse.xtext.astconversion.ast.ASTAddition XTEXT_INIT() {
					this.expressions = children.expressions;
					this.left = node.getLeft();
					this.right = node.getRight();
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class ProgramChildren {
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTEntry> entries;
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTSequence> sequence;
			public org.eclipse.xtext.astconversion.ast.ASTReturnsNewX returnsNew;
			public org.eclipse.xtext.astconversion.ast.ASTActionNew actionNew;
			public org.eclipse.xtext.astconversion.ast.ASTLists list;
		}
		public Object convertProgram(org.eclipse.xtext.astconversion.astConversionSimple.Program node, ProgramChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTProgram() {
				org.eclipse.xtext.astconversion.ast.ASTProgram XTEXT_INIT() {
					this.entries = children.entries;
					this.sequence = children.sequence;
					this.returnsNew = children.returnsNew;
					this.actionNew = children.actionNew;
					this.list = children.list;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class MapEntryChildren {
		}
		public Object convertMapEntry(org.eclipse.xtext.astconversion.astConversionSimple.MapEntry node, MapEntryChildren children){
			return new java.util.ArrayList<org.eclipse.xtext.astconversion.ast.ASTMapEntry>() {
				private static final long serialVersionUID = 0;
					java.util.ArrayList<org.eclipse.xtext.astconversion.ast.ASTMapEntry> XTEXT_INIT() {
					  for(String key: node.getKeys()){
					    this.add(new org.eclipse.xtext.astconversion.ast.ASTMapEntry(key, node.getValue()));
					  }
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class OtherChildren {
			public java.lang.Object content;
		}
		public Object convertOther(org.eclipse.xtext.astconversion.astConversionSimple.Other node, OtherChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTOther() {
				org.eclipse.xtext.astconversion.ast.ASTOther XTEXT_INIT() {
					this.name = node.getName();
					this.content = children.content;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class SequenceChildren {
			public java.util.List<org.eclipse.xtext.astconversion.ast.ASTSequence> expressions;
		}
		public Object convertSequence(org.eclipse.xtext.astconversion.astConversionSimple.Sequence node, SequenceChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTSequence() {
				org.eclipse.xtext.astconversion.ast.ASTSequence XTEXT_INIT() {
					this.expressions = children.expressions;
					return this;
				}
			}.XTEXT_INIT();
		}
		public static class AutoExplicitClassChildren {
			public org.eclipse.xtext.astconversion.ast.ASTReference ref;
		}
		public Object convertAutoExplicitClass(org.eclipse.xtext.astconversion.astConversionSimple.AutoExplicitClass node, AutoExplicitClassChildren children){
			return new org.eclipse.xtext.astconversion.ast.ASTAutoExplicitClass() {
				org.eclipse.xtext.astconversion.ast.ASTAutoExplicitClass XTEXT_INIT() {
					this.name = node.getName();
					return this;
				}
			}.XTEXT_INIT();
		}
	}
	
	private final Grammar grammar;
	private final ASTConversion astConversion;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ASTConversionSimpleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.astConversion = new ASTConversion();
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pEntry = new EntryElements();
		this.pAutoClass = new AutoClassElements();
		this.pAutoExplicitClass = new AutoExplicitClassElements();
		this.pManualClass = new ManualClassElements();
		this.pCustomASTClass = new CustomASTClassElements();
		this.pCustomCopyASTClass = new CustomCopyASTClassElements();
		this.pReference = new ReferenceElements();
		this.pOther = new OtherElements();
		this.pElement = new ElementElements();
		this.eChangeKind = new ChangeKindElements();
		this.pSequence = new SequenceElements();
		this.pAddition = new AdditionElements();
		this.pReturnsNew = new ReturnsNewElements();
		this.pActionNew = new ActionNewElements();
		this.pLists = new ListsElements();
		this.pMapEntry = new MapEntryElements();
		this.pMapEntryCustom = new MapEntryCustomElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.astconversion.ASTConversionSimple".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}

	@Override
	public ASTConversion getASTConversion() {
		return astConversion;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program becomes:
	//	entries+=Entry+
	//	sequence+=Sequence+
	//	returnsNew=ReturnsNew
	//	actionNew=ActionNew
	//	list=Lists;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Entry becomes:
	//	AutoClass | AutoExplicitClass | ManualClass | CustomASTClass | CustomCopyASTClass | Other | Element;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//AutoClass becomes:
	//	"auto" ref=Reference name=ID ";";
	public AutoClassElements getAutoClassAccess() {
		return pAutoClass;
	}
	
	public ParserRule getAutoClassRule() {
		return getAutoClassAccess().getRule();
	}
	
	//AutoExplicitClass becomes (name):
	//	"auto-explicit" ref=Reference name=ID ";";
	public AutoExplicitClassElements getAutoExplicitClassAccess() {
		return pAutoExplicitClass;
	}
	
	public ParserRule getAutoExplicitClassRule() {
		return getAutoExplicitClassAccess().getRule();
	}
	
	//ManualClass becomes («ASTReference» ref, String value) $$
	//	this.ref = children.ref;
	//	this.value = node.getName();
	//$$:
	//	"manual" ref=Reference name=ID ";";
	public ManualClassElements getManualClassAccess() {
		return pManualClass;
	}
	
	public ParserRule getManualClassRule() {
		return getManualClassAccess().getRule();
	}
	
	//CustomASTClass becomes ASTCustomClass $$
	//	this.type = children.ref.name;
	//	this.name = node.getName();
	//$$:
	//	"custom" ref=Reference name=ID ";";
	public CustomASTClassElements getCustomASTClassAccess() {
		return pCustomASTClass;
	}
	
	public ParserRule getCustomASTClassRule() {
		return getCustomASTClassAccess().getRule();
	}
	
	//CustomCopyASTClass becomes ASTCustomClass (name) $$
	//	this.type = children.ref.name;
	//$$:
	//	"custom-copy" ref=Reference name=ID ";";
	public CustomCopyASTClassElements getCustomCopyASTClassAccess() {
		return pCustomCopyASTClass;
	}
	
	public ParserRule getCustomCopyASTClassRule() {
		return getCustomCopyASTClassAccess().getRule();
	}
	
	//Reference becomes:
	//	name=ID;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//// --------
	//Other becomes:
	//	"other" name=ID content=(Reference | AutoClass);
	public OtherElements getOtherAccess() {
		return pOther;
	}
	
	public ParserRule getOtherRule() {
		return getOtherAccess().getRule();
	}
	
	//// --------
	//Element becomes:
	//	'element' name=ID type=ChangeKind? '=' value+=ChangeKind+ ';';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//enum ChangeKind becomes:
	//	ADD='add' | MOVE='move' |
	//	REMOVE='remove';
	public ChangeKindElements getChangeKindAccess() {
		return eChangeKind;
	}
	
	public EnumRule getChangeKindRule() {
		return getChangeKindAccess().getRule();
	}
	
	//// --------
	//Sequence becomes:
	//	"sequence" Addition ({Sequence.expressions+=current} expressions+=Addition)* ";";
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}
	
	//Addition becomes:
	//	left=ID '+' right=ID;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//ReturnsNew returns ReturnsNewX becomes:
	//	'returns-new' value=ID ';';
	public ReturnsNewElements getReturnsNewAccess() {
		return pReturnsNew;
	}
	
	public ParserRule getReturnsNewRule() {
		return getReturnsNewAccess().getRule();
	}
	
	//ActionNew becomes:
	//	{ActionNewX} 'action-new' value=ID ';';
	public ActionNewElements getActionNewAccess() {
		return pActionNew;
	}
	
	public ParserRule getActionNewRule() {
		return getActionNewAccess().getRule();
	}
	
	//// --------
	//Lists becomes:
	//	a=MapEntry ";"
	//	b=MapEntryCustom ";"
	//	c+=MapEntry+ ";"
	//	d+=MapEntryCustom+ ";";
	public ListsElements getListsAccess() {
		return pLists;
	}
	
	public ParserRule getListsRule() {
		return getListsAccess().getRule();
	}
	
	//MapEntry becomes [] (String x, int y) $$
	//  for(String key: node.getKeys()){
	//    this.add(new «ASTMapEntry»(key, node.getValue()));
	//  }
	//$$:
	//	"[" keys+=ID ("," keys+=ID)* "]" ":" value=INT;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}
	
	//MapEntryCustom becomes [«NodeList»<«ASTMapEntryCustom»>] (String x, String y) $$
	//  for(String key: node.getKeys()){
	//    this.add(new «ASTMapEntryCustom»(key, children.value.name));
	//  }
	//$$:
	//	"[" keys+=ID ("," keys+=ID)* "]" ":" value=Reference;
	public MapEntryCustomElements getMapEntryCustomAccess() {
		return pMapEntryCustom;
	}
	
	public ParserRule getMapEntryCustomRule() {
		return getMapEntryCustomAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
