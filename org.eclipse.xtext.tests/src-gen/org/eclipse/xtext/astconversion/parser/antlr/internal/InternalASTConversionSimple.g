/*
 * generated by Xtext
 */
grammar InternalASTConversionSimple;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.xtext.astconversion.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.xtext.astconversion.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.astconversion.services.ASTConversionSimpleGrammarAccess;

}

@parser::members {

 	private ASTConversionSimpleGrammarAccess grammarAccess;

    public InternalASTConversionSimpleParser(TokenStream input, ASTConversionSimpleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ASTConversionSimpleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getEntriesEntryParserRuleCall_0());
			}
			lv_entries_0_0=ruleEntry
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"entries",
					lv_entries_0_0,
					"org.eclipse.xtext.astconversion.ASTConversionSimple.Entry");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntryAccess().getAutoClassParserRuleCall_0());
		}
		this_AutoClass_0=ruleAutoClass
		{
			$current = $this_AutoClass_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getAutoExplicitClassParserRuleCall_1());
		}
		this_AutoExplicitClass_1=ruleAutoExplicitClass
		{
			$current = $this_AutoExplicitClass_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getManualClassParserRuleCall_2());
		}
		this_ManualClass_2=ruleManualClass
		{
			$current = $this_ManualClass_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getCustomASTClassParserRuleCall_3());
		}
		this_CustomASTClass_3=ruleCustomASTClass
		{
			$current = $this_CustomASTClass_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getCustomCopyASTClassParserRuleCall_4());
		}
		this_CustomCopyASTClass_4=ruleCustomCopyASTClass
		{
			$current = $this_CustomCopyASTClass_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getOtherParserRuleCall_5());
		}
		this_Other_5=ruleOther
		{
			$current = $this_Other_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getElementParserRuleCall_6());
		}
		this_Element_6=ruleElement
		{
			$current = $this_Element_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAutoClass
entryRuleAutoClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoClassRule()); }
	iv_ruleAutoClass=ruleAutoClass
	{ $current=$iv_ruleAutoClass.current; }
	EOF;

// Rule AutoClass
ruleAutoClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='auto'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutoClassAccess().getAutoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoClassAccess().getRefReferenceParserRuleCall_1_0());
				}
				lv_ref_1_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoClassRule());
					}
					set(
						$current,
						"ref",
						lv_ref_1_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAutoClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAutoClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAutoClassAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAutoExplicitClass
entryRuleAutoExplicitClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoExplicitClassRule()); }
	iv_ruleAutoExplicitClass=ruleAutoExplicitClass
	{ $current=$iv_ruleAutoExplicitClass.current; }
	EOF;

// Rule AutoExplicitClass
ruleAutoExplicitClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='auto-explicit'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutoExplicitClassAccess().getAutoExplicitKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoExplicitClassAccess().getRefReferenceParserRuleCall_1_0());
				}
				lv_ref_1_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoExplicitClassRule());
					}
					set(
						$current,
						"ref",
						lv_ref_1_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAutoExplicitClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAutoExplicitClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAutoExplicitClassAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleManualClass
entryRuleManualClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getManualClassRule()); }
	iv_ruleManualClass=ruleManualClass
	{ $current=$iv_ruleManualClass.current; }
	EOF;

// Rule ManualClass
ruleManualClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='manual'
		{
			newLeafNode(otherlv_0, grammarAccess.getManualClassAccess().getManualKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getManualClassAccess().getRefReferenceParserRuleCall_1_0());
				}
				lv_ref_1_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getManualClassRule());
					}
					set(
						$current,
						"ref",
						lv_ref_1_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getManualClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getManualClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getManualClassAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleCustomASTClass
entryRuleCustomASTClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomASTClassRule()); }
	iv_ruleCustomASTClass=ruleCustomASTClass
	{ $current=$iv_ruleCustomASTClass.current; }
	EOF;

// Rule CustomASTClass
ruleCustomASTClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='custom'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomASTClassAccess().getCustomKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomASTClassAccess().getRefReferenceParserRuleCall_1_0());
				}
				lv_ref_1_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomASTClassRule());
					}
					set(
						$current,
						"ref",
						lv_ref_1_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCustomASTClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomASTClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomASTClassAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleCustomCopyASTClass
entryRuleCustomCopyASTClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCustomCopyASTClassRule()); }
	iv_ruleCustomCopyASTClass=ruleCustomCopyASTClass
	{ $current=$iv_ruleCustomCopyASTClass.current; }
	EOF;

// Rule CustomCopyASTClass
ruleCustomCopyASTClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='custom-copy'
		{
			newLeafNode(otherlv_0, grammarAccess.getCustomCopyASTClassAccess().getCustomCopyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCustomCopyASTClassAccess().getRefReferenceParserRuleCall_1_0());
				}
				lv_ref_1_0=ruleReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCustomCopyASTClassRule());
					}
					set(
						$current,
						"ref",
						lv_ref_1_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getCustomCopyASTClassAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCustomCopyASTClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCustomCopyASTClassAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleOther
entryRuleOther returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtherRule()); }
	iv_ruleOther=ruleOther
	{ $current=$iv_ruleOther.current; }
	EOF;

// Rule Other
ruleOther returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='other'
		{
			newLeafNode(otherlv_0, grammarAccess.getOtherAccess().getOtherKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOtherAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOtherRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOtherAccess().getContentReferenceParserRuleCall_2_0_0());
					}
					lv_content_2_1=ruleReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOtherRule());
						}
						set(
							$current,
							"content",
							lv_content_2_1,
							"org.eclipse.xtext.astconversion.ASTConversionSimple.Reference");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getOtherAccess().getContentAutoClassParserRuleCall_2_0_1());
					}
					lv_content_2_2=ruleAutoClass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOtherRule());
						}
						set(
							$current,
							"content",
							lv_content_2_2,
							"org.eclipse.xtext.astconversion.ASTConversionSimple.AutoClass");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='element'
		{
			newLeafNode(otherlv_0, grammarAccess.getElementAccess().getElementKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getTypeChangeKindEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleChangeKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.ChangeKind");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getElementAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getValueChangeKindEnumRuleCall_4_0());
				}
				lv_value_4_0=ruleChangeKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					add(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.astconversion.ASTConversionSimple.ChangeKind");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getElementAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getReferenceRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Rule ChangeKind
ruleChangeKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='add'
			{
				$current = grammarAccess.getChangeKindAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getChangeKindAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='move'
			{
				$current = grammarAccess.getChangeKindAccess().getMOVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getChangeKindAccess().getMOVEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='remove'
			{
				$current = grammarAccess.getChangeKindAccess().getREMOVEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getChangeKindAccess().getREMOVEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
