/*
 * generated by Xtext
 */
package org.eclipse.xtext.astconversion.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.astconversion.astConversionSimple.AstConversionSimplePackage;
import org.eclipse.xtext.astconversion.astConversionSimple.AutoClass;
import org.eclipse.xtext.astconversion.astConversionSimple.AutoExplicitClass;
import org.eclipse.xtext.astconversion.astConversionSimple.CustomASTClass;
import org.eclipse.xtext.astconversion.astConversionSimple.CustomCopyASTClass;
import org.eclipse.xtext.astconversion.astConversionSimple.Element;
import org.eclipse.xtext.astconversion.astConversionSimple.ManualClass;
import org.eclipse.xtext.astconversion.astConversionSimple.Other;
import org.eclipse.xtext.astconversion.astConversionSimple.Program;
import org.eclipse.xtext.astconversion.astConversionSimple.Reference;
import org.eclipse.xtext.astconversion.services.ASTConversionSimpleGrammarAccess;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ASTConversionSimpleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ASTConversionSimpleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AstConversionSimplePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AstConversionSimplePackage.AUTO_CLASS:
				sequence_AutoClass(context, (AutoClass) semanticObject); 
				return; 
			case AstConversionSimplePackage.AUTO_EXPLICIT_CLASS:
				sequence_AutoExplicitClass(context, (AutoExplicitClass) semanticObject); 
				return; 
			case AstConversionSimplePackage.CUSTOM_AST_CLASS:
				sequence_CustomASTClass(context, (CustomASTClass) semanticObject); 
				return; 
			case AstConversionSimplePackage.CUSTOM_COPY_AST_CLASS:
				sequence_CustomCopyASTClass(context, (CustomCopyASTClass) semanticObject); 
				return; 
			case AstConversionSimplePackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case AstConversionSimplePackage.MANUAL_CLASS:
				sequence_ManualClass(context, (ManualClass) semanticObject); 
				return; 
			case AstConversionSimplePackage.OTHER:
				sequence_Other(context, (Other) semanticObject); 
				return; 
			case AstConversionSimplePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case AstConversionSimplePackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entry returns AutoClass
	 *     AutoClass returns AutoClass
	 *
	 * Constraint:
	 *     (ref=Reference name=ID)
	 */
	protected void sequence_AutoClass(ISerializationContext context, AutoClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.AUTO_CLASS__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.AUTO_CLASS__REF));
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAutoClassAccess().getRefReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getAutoClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns AutoExplicitClass
	 *     AutoExplicitClass returns AutoExplicitClass
	 *
	 * Constraint:
	 *     (ref=Reference name=ID)
	 */
	protected void sequence_AutoExplicitClass(ISerializationContext context, AutoExplicitClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.AUTO_EXPLICIT_CLASS__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.AUTO_EXPLICIT_CLASS__REF));
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAutoExplicitClassAccess().getRefReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getAutoExplicitClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns CustomASTClass
	 *     CustomASTClass returns CustomASTClass
	 *
	 * Constraint:
	 *     (ref=Reference name=ID)
	 */
	protected void sequence_CustomASTClass(ISerializationContext context, CustomASTClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.CUSTOM_AST_CLASS__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.CUSTOM_AST_CLASS__REF));
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomASTClassAccess().getRefReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getCustomASTClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns CustomCopyASTClass
	 *     CustomCopyASTClass returns CustomCopyASTClass
	 *
	 * Constraint:
	 *     (ref=Reference name=ID)
	 */
	protected void sequence_CustomCopyASTClass(ISerializationContext context, CustomCopyASTClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.CUSTOM_COPY_AST_CLASS__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.CUSTOM_COPY_AST_CLASS__REF));
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomCopyASTClassAccess().getRefReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getCustomCopyASTClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns Element
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (name=ID type=ChangeKind? value+=ChangeKind+)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns ManualClass
	 *     ManualClass returns ManualClass
	 *
	 * Constraint:
	 *     (ref=Reference name=ID)
	 */
	protected void sequence_ManualClass(ISerializationContext context, ManualClass semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.MANUAL_CLASS__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.MANUAL_CLASS__REF));
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.ENTRY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getManualClassAccess().getRefReferenceParserRuleCall_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getManualClassAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns Other
	 *     Other returns Other
	 *
	 * Constraint:
	 *     (name=ID (content=Reference | content=AutoClass))
	 */
	protected void sequence_Other(ISerializationContext context, Other semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     entries+=Entry+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AstConversionSimplePackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AstConversionSimplePackage.Literals.REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
