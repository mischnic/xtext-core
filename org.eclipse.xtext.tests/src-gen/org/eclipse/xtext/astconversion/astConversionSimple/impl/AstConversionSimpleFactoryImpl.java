/**
 * generated by Xtext
 */
package org.eclipse.xtext.astconversion.astConversionSimple.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.xtext.astconversion.astConversionSimple.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AstConversionSimpleFactoryImpl extends EFactoryImpl implements AstConversionSimpleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AstConversionSimpleFactory init()
  {
    try
    {
      AstConversionSimpleFactory theAstConversionSimpleFactory = (AstConversionSimpleFactory)EPackage.Registry.INSTANCE.getEFactory(AstConversionSimplePackage.eNS_URI);
      if (theAstConversionSimpleFactory != null)
      {
        return theAstConversionSimpleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AstConversionSimpleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AstConversionSimpleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AstConversionSimplePackage.PROGRAM: return createProgram();
      case AstConversionSimplePackage.ENTRY: return createEntry();
      case AstConversionSimplePackage.AUTO_CLASS: return createAutoClass();
      case AstConversionSimplePackage.AUTO_EXPLICIT_CLASS: return createAutoExplicitClass();
      case AstConversionSimplePackage.MANUAL_CLASS: return createManualClass();
      case AstConversionSimplePackage.CUSTOM_AST_CLASS: return createCustomASTClass();
      case AstConversionSimplePackage.CUSTOM_COPY_AST_CLASS: return createCustomCopyASTClass();
      case AstConversionSimplePackage.REFERENCE: return createReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entry createEntry()
  {
    EntryImpl entry = new EntryImpl();
    return entry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AutoClass createAutoClass()
  {
    AutoClassImpl autoClass = new AutoClassImpl();
    return autoClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AutoExplicitClass createAutoExplicitClass()
  {
    AutoExplicitClassImpl autoExplicitClass = new AutoExplicitClassImpl();
    return autoExplicitClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManualClass createManualClass()
  {
    ManualClassImpl manualClass = new ManualClassImpl();
    return manualClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomASTClass createCustomASTClass()
  {
    CustomASTClassImpl customASTClass = new CustomASTClassImpl();
    return customASTClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomCopyASTClass createCustomCopyASTClass()
  {
    CustomCopyASTClassImpl customCopyASTClass = new CustomCopyASTClassImpl();
    return customCopyASTClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstConversionSimplePackage getAstConversionSimplePackage()
  {
    return (AstConversionSimplePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AstConversionSimplePackage getPackage()
  {
    return AstConversionSimplePackage.eINSTANCE;
  }

} //AstConversionSimpleFactoryImpl
